[ { "title": "Notas sobre OOP -> Encapsulamienti, Herencia, Polimorfismo y Abstracción", "url": "/posts/Notes-about-OOP-Main-principles/", "categories": "Java, OOP", "tags": "Java, OOP", "date": "2023-05-13 10:33:00 -0500", "snippet": "Notas sobre OOP: Abstracción, Encapsulamiento, Decomposición y GeneralizaciónUsualmente en las entrevistas de trabajo que me han permitido tener me han preguntado al menos 1 de estos principios y es por eso que considero bastante útil hablar de ellos en este post y darlos a conocer de la manera más clara posible.La programación orientada a objetos es un paradigma que nos permite representar a las entidades de nuestros softwares o sistemas por medio de clases y los cuatro principios que explicaré a continuación son los pilares sobre los cuales se constituye este paradigma.AbstacciónEste principio de diseño consiste en determinar las características y funcionalidades más importantes de nuestras entidades y empaquetarlos en una clase y omitir aquellas características que no sean absolutamente necesarias para modelar correctamente nuestra entidades.EncapsulamientoAl momento de diseñar las clases que representarán nuestras entidades existirán atributos y métodos que uno no desea que sean accesibles desde entidades externas y es esto básicamente de lo que trata el principio de encapsulamiento: tener la capacidad de exponer a entidades externas solo un conjunto determinado de características y métodos y un conjunto que se mantendrá oculto del resto.DecomposiciónEste principio de diseño consiste en dividir un problema complejo o un sistema en varias partes que sean lo más pequeñas posibles para que sean fáciles de entender y mantener.El principio es de gran utilidad dado que nos ayudará a evitar la existencia de entidades demasiado grandes y que posean una cantidad excesiva de responsabilidades y, aún más importante, responsabilidades que ni si quiera le competan.GeneralizaciónEn el contexto de la programación orientada a objetos, la generalización consiste en extraer métodos y características comunes de un conjunto de entidades, ubicarlos en una clase padre y mediante el mecanismo de la herencia dicha clase padre será extendida por el conjundo de entidades de los que se habló previamente en este párrafo (también conocidas como subclases) de modo que dichas subclases pueden o bien repertir el comportamiento de la clase padre o incluso sobreescribirlo." }, { "title": "Inmutabilidad de los observables", "url": "/posts/Observables-inmutabilidad/", "categories": "Java, Project Reactor", "tags": "Java, Project Reactor", "date": "2023-05-09 10:33:00 -0500", "snippet": "Inmutabilidad de los observablesSupongamos que tenemos el siguiente código: public static void main(String[] args) { Flux&lt;Integer&gt; numbers = Flux.just(1, 2, 3, 4, 5, 6, 7).map(n -&gt; n * 10); (1) numbers.filter(n -&gt; n % 20 == 0); (2) numbers.subscribe(n -&gt; System.out.println(\"Number \" + n)); (3) }Inicialmente pensé que en (1) se generaba nuestro flujo de datos (u observable) y se definía que al recorrerlos se les multiplica por 10, que en (2) se filtran los multiplos de 20 y que en (3) se accede al flujo de datos final y se imprimirían todos los números múltiplos de 20. Sin embargo, la salida final del programa es la siguiente:Number 10Number 20Number 30Number 40Number 50Number 60Number 70¿Por qué ocurre esto?Esto ocurre debido a que LOS OBSERVABLES SON INMUTABLES.Lo que ocurre en cada línea es lo siguiente: En (1) se genera un observable con el flujo inicial de datos y se especifica que se desea que se multiplique por 10 a cada valor al momento de acceder a dicho flujo de datos. En (2) no se filtran los valores de nuestro observable inicial, sino que SE GENERA UN NUEVO OBSERVABLE Y NUESTRO OBSERVABLE INICIAL PERMANECE INALTERADO. De hecho podríamos tranquilamente guardar dicho observable en otra variable así: Flux&lt;Integer&gt; numbersOf20 = numbers.filter(n -&gt; n % 20 == 0);Recordar que muchos operadores como filter lo que hacen es simplemente generar o retornar un nuevo observable a partir del original Finalmente en (3) accedemos a los datos de nuestro observable mediante nuestro método subscribe." }, { "title": "JDK - JRE - JVM", "url": "/posts/JDK-JRE-JVM/", "categories": "Java", "tags": "Java", "date": "2023-05-03 10:33:00 -0500", "snippet": "JDK - JRE - JVM Los acrónimos de cada una de estas herramientas son: JRE (Java Runtime Environment) JVM (Java Virtual Machine) JDK (Java Development Kit)Jerarquía de las herramientasExplicación de cada herramienta JVM (Java Virtual Machine): la máquina virtual de Java es la encargada de procesar el bytecode generado por un compilador de java (se puede usar esta compilador con la herramienta javac que provee el JDK como se verá luego) y lo tranduce a instrucciones que pueden ser interpretadas por el CPU de nuestra computadora.Funcionamiento básico de la JVM JRE (Java Runtime Environment): esta herramienta incluye a la JVM y además incluye otras librerías y ficheros jar que son utilizados por la JVM en tiempo de ejecución. JDK (Java Development Kit): esta herramienta engloba a la JVM, al JRE y también herramientas java. javac, debuggers y JavaDoc que son las que permiten el desarrollo de software con Java." }, { "title": "Errores y Excepciones en Java", "url": "/posts/Errors-and-Exceptions-in-Java/", "categories": "Java", "tags": "Java", "date": "2023-05-01 10:33:00 -0500", "snippet": "Errores y Excepciones en JavaJerarquía de errores y excepciones Teóricamente los errores y excepciones no son más que clases que se encuentran dentro del package java.lang y su jerarquía se muestra en la imagen a continuación:Errores Según la imagen mostrada los errores pueden entenderse como excepciones o eventos que ocurren y son revisados en tiempo de ejecución. A diferencia de las excepciones, que se manejan con bloques try-catch por ejemplo, los errores no deben ser manejados ya que son eventos que no deberían ocurrir y uno nunca quiere que ocurran errores. Tomemos por ejemplo un AssertionFailedError en un test que ocurre porque una aserción falló. Esto no se debe manejar porque nunca debería ocurrir ya que uno no programa sus tests para que fallen.Checked ExceptionsEstas excepciones se llaman así debido a que son verificadas en tiempo de compilación. El compilador de Java e incluso un IDE avanzado como IntelliJ nos alertan si el código que estamos escribiendo nos lanzará una Checked Exception. Entre estas excepciones tenemos: ClassNotFoundException SocketException SQLException IOException FileNotFoundExceptionUnchecked ExceptionsSon excepciones que son subclaes de RuntimeException debido a que ocurren en tiempo de ejecición. Entre estas excepciones tenemos: NullPointerException ClassCastException ArithmeticException DateTimeException ArrayStoreException" }, { "title": "Testing random names", "url": "/posts/new-post-title/", "categories": "Lectures", "tags": "lectures", "date": "2022-07-19 10:33:00 -0500", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Test", "tags": "typography", "date": "2022-07-19 10:33:00 -0500", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - heading&lt;h4&gt;H4 - heading&lt;/h4&gt;ParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum\\_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
